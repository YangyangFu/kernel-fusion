# Development Dockerfile for Kernel Fusion Library
# Base: PyTorch with CUDA development tools
FROM pytorch/pytorch:2.7.1-cuda12.8-cudnn9-devel

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    cmake \
    ninja-build \
    git \
    wget \
    curl \
    # OpenMP for CPU parallelization
    libomp-dev \
    # Additional development tools
    vim \
    htop \
    tmux \
    tree \
    # For debugging and profiling
    gdb \
    valgrind \
    strace \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python development dependencies
RUN pip install --no-cache-dir \
    # Core dependencies
    numpy>=1.20.0 \
    pybind11>=2.6.0 \
    # Development tools
    pytest>=6.0 \
    pytest-cov \
    pytest-benchmark \
    black>=22.0 \
    flake8>=4.0 \
    mypy>=0.950 \
    isort \
    # Documentation
    sphinx>=4.0 \
    sphinx-rtd-theme>=1.0 \
    myst-parser>=0.17 \
    # Profiling and debugging
    py-spy \
    memory-profiler \
    line-profiler \
    # Jupyter for development
    jupyter \
    ipython

# Verify CUDA installation
RUN nvcc --version && \
    python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA version: {torch.version.cuda}')"

# Set up working directory
WORKDIR /workspace

# Create development environment setup script
RUN echo '#!/bin/bash\n\
echo "Setting up Kernel Fusion development environment..."\n\
echo "PyTorch version: $(python -c \"import torch; print(torch.__version__)\")"\n\
echo "CUDA available: $(python -c \"import torch; print(torch.cuda.is_available())\")"\n\
echo "CUDA device count: $(python -c \"import torch; print(torch.cuda.device_count() if torch.cuda.is_available() else 0)\")"\n\
if [ -f "setup.py" ]; then\n\
    echo "Installing kernel-fusion in development mode..."\n\
    pip install -e ".[dev]"\n\
    echo "Running verification..."\n\
    python scripts/test_docker_env.py\n\
else\n\
    echo "setup.py not found. Please ensure the source code is properly mounted to /workspace"\n\
    echo "Expected mount: your-local-path:/workspace"\n\
fi\n\
echo "Development environment ready!"\n\
echo "Run: setup-dev-env to install the package in development mode"\n\
' > /usr/local/bin/setup-dev-env && chmod +x /usr/local/bin/setup-dev-env

# Note: Source code will be mounted at runtime to /workspace
# No copying of source code - this allows live editing

# Set default command
CMD ["/bin/bash"]

# Add helpful aliases and development setup
RUN echo 'alias ll="ls -la"' >> ~/.bashrc && \
    echo 'alias gpu-info="nvidia-smi"' >> ~/.bashrc && \
    echo 'alias build-kernels="python setup.py build_ext --inplace"' >> ~/.bashrc && \
    echo 'alias test-kernels="pytest tests/ -v"' >> ~/.bashrc && \
    echo 'alias benchmark="python examples/benchmark_fusion.py"' >> ~/.bashrc && \
    echo 'alias install-dev="pip install -e ."' >> ~/.bashrc && \
    echo 'alias reinstall-dev="pip uninstall -y kernel-fusion && pip install -e ."' >> ~/.bashrc && \
    echo 'echo "🚀 Kernel Fusion Development Environment"' >> ~/.bashrc && \
    echo 'echo "📁 Working directory: $(pwd)"' >> ~/.bashrc && \
    echo 'echo "💡 Run: setup-dev-env to install package in development mode"' >> ~/.bashrc && \
    echo 'echo "💡 Useful aliases: install-dev, test-kernels, benchmark, gpu-info"' >> ~/.bashrc

# Expose Jupyter port for development
EXPOSE 8888
